

context App::ClearData
post:
    self.Groups.forAll( element.Lists.forAll(list: TaskList| list.Tasks.removeAll and list.AllTasks.removeAll)
                        element.Lists.removeAll
                        element.AllLists.forAll(list: TaskList| list.Tasks.removeAll and list.AllTasks.removeAll)
                        element.AllLists.removeAll
                        element.Members.removeAll)
    self.Groups.removeAll
    self.Users.removeAll


context App::ResetDemoData
post:
    self.PublicGroups.forAll(   element.Lists.forAll(list: TaskList| list.Tasks.removeAll and list.AllTasks.removeAll)
                                element.Lists.removeAll
                                element.AllLists.forAll(list: TaskList| list.Tasks.removeAll and list.AllTasks.removeAll)
                                element.AllLists.removeAll
                                element.Members.removeAll)
    self.PublicGroups.removeAll

context App::InitHomeGroups
post:
    -- -------------------- Home group --------------------------
    let homeGroup: Group = new Group
    homeGroup.IsPublic = false
    homeGroup.Name = 'My home group'
    homeGroup.Lists.removeAll

    homeGroup.AllTags = "#urgent #grocery #dairy #beauty #clothes #party"

    -- Add some data
    let list: TaskList in
    list = homeGroup.Lists.newElement(element.Order = 0)

    let states: JsonObject = [
        {
            name: 'Required',
            state: 0
        },
        {
            name: 'Running out',
            state: 100
        },
        {
            name: 'Delivering',
            state: STATE_FINISHED
        }
    ]

    list.TaskStates = states.ToString()

    list.Name = "Shopping list"
    list.IndexPrefix = 'SHP'
        list.CreateTask('Butter', 'Buy a few on promotion', 0, '#urgent #grocery #dairy')
        list.CreateTask('Milk', 'As fat as you can', 0, '#grocery #dairy')
        list.CreateTask('Bread', 'Take three, two of them will be frozen', 100, '#urgent #grocery')
        list.CreateTask('Tomatos', '', 0, '#grocery #party');
        list.CreateTask('Lettuce', 'Must be fresh!', 0, '#grocery #party')
        list.CreateTask('Beer', "Hefeweizens and Pilsners only, they don't drink modern styles", STATE_FINISHED, '#grocery #party')
        list.CreateTask('Honey', "It's needed for outmeal", STATE_FINISHED, '#grocery')
        list.CreateTask('Toothpaste', '', 100, '#beauty')
        list.CreateTask('Shower gel', '', 100, '#beauty')
        list.CreateTask('Sneakers', "It's already spring, I need new shoes", 3, '#urgent #clothes')
    list.ReorderTasks()

    list = homeGroup.Lists.newElement(element.Order = 10)
    list.Name = "Movies to watch"
    list.IndexPrefix = 'MVS'
        list.CreateTask('From Dusk Till Dawn', '', 0)
        list.CreateTask('The Lion King', '', 0)
        list.CreateTask('Back to the Future', '', 0)
    list.ReorderTasks()

    list = homeGroup.Lists.newElement(element.Order = 20)
    list.Name = "Places to visit"
    list.IndexPrefix = 'PLC'
        list.CreateTask('Paris', '', 0)
        list.CreateTask('Swiss Alps', '', 0)
        list.CreateTask('Bora Bora', '', 0)
        list.CreateTask('Rio de Janeiro', '', 0)
    list.ReorderTasks()



    ------------------------------  Dreams group -------------------------------

    let dreamsGroup: Group = new Group
    dreamsGroup.IsPublic = true
    dreamsGroup.Name = 'My dreams group'
    dreamsGroup.Lists.removeAll

    -- Add some data
    list = dreamsGroup.Lists.newElement(element.Order = 0)
    list.Name = "Actors to meet"
    list.IndexPrefix = 'ACT'
        list.CreateTask('Jim Carrey', '', 0)
        list.CreateTask('Tobey Maguire', '', 0)
        list.CreateTask('Dwayne Johnson', '', 0)
        list.CreateTask('Chris Evans', '', 0)
        list.CreateTask('Ice Cube', '', 0)
        list.CreateTask('Chris Rock', '', 0)
    list.ReorderTasks()

    list = dreamsGroup.Lists.newElement(element.Order = 20)
    list.Name = "Cars to buy"
    list.IndexPrefix = 'CAR'
        list.CreateTask('Aston Martin DB5', '', 0)
        list.CreateTask('DeLorean DMC-12', '', 0)
        list.CreateTask('Mustang GT 390', '', 0)
        list.CreateTask('Ford Torino', '', 0)
    list.ReorderTasks()


context App::InitGuestsGroup
post:
-- -------------------- Motorcycle's production --------------------------
    let guests: Group = system.allInstances("Group").select(element.Name = "Guests").first

    if guests = 0 then
        guests = new Group
        guests.Name = "Guests"
    end if
    guests.Lists.removeAll

    guests.AllTags = "#urgent #bug #feature #prototype"

    guests.CheckFolders()

    guests.AddGeneralMessageChannels()

    -- Add some data
    let list: TaskList in
    list = guests.Lists.newElement(element.Order = 0)

    -- list.TaskStates = '[{"name":"Required","state":0},{"name":"Running out","state":100},{"name":"Delivering","state":1000}]'
    let states: JsonObject = [
        {
            name: 'Preparing',
            state: 0
        },
        {
            name: 'In progress',
            state: 100
        },
        {
            name: 'Done',
            state: STATE_FINISHED
        }
    ]

    list.TaskStates = states.ToString()

    list.Name = "Design"
    list.IndexPrefix = 'DGN'
        list.CreateTask('Target Audience Definition', 'Identify the specific demographics and needs of the intended buyers', STATE_FINISHED, '#urgent')

            list.Tasks.last.Description = '<h1>Description with images</h1>
            <p>Deer</p>
            <img alt="Deer" src="" data-path="group/Lists/19/Tasks/71/Images/blob?key=deer.jpg"/>
            <p>Flowers</p>
            <img alt="Flowers" src="" data-path="group/Lists/19/Tasks/71/Images/blob?key=flowers.png"/>
            <p>Tree</p>
            <img alt="Tree" src="" data-path="group/Lists/19/Tasks/71/Images/blob?key=tree.webp"/>
            '
            list.Tasks.last.Images = 'deer.jpg;flowers.png;tree.webp'

        list.CreateTask('Design Goals', 'Establish core objectives (e.g., performance, style, price range, features).', STATE_FINISHED, '')
        list.CreateTask('Concept Design', 'Create initial sketches and 3D models of the motorcycle.', 100, '#prototype')
        list.CreateTask('Engineering Design', 'Develop detailed technical specifications, including frame, engine, and suspension.', 0, '#prototype');
        list.Tasks.last.AttachedFiles='lorem.txt';

        list.CreateTask('Ergonomics Testing', 'Ensure the motorcycle provides a comfortable and functional ride for the target user.', 0, '#prototype')
        list.CreateTask('Prototype Development', "Build a working prototype to test the design and functionality", 0, '#prototype')
    list.ReorderTasks()

    list = guests.Lists.newElement(element.Order = 10)
    list.Name = "Engineering"
    list.IndexPrefix = 'ENG'
        list.CreateTask('Performance Testing', 'Test the prototype for speed, handling, durability, and efficiency.', 0)
        list.CreateTask('Safety Testing', 'Ensure compliance with safety regulations and conduct crash tests where necessary.', 0)
        list.CreateTask('Environmental Compliance', 'Meet emissions standards and other environmental regulations.', 0)
        list.CreateTask('Refinement', 'Address issues identified during testing, including mechanical, aesthetic, and ergonomic concerns.', 0)
    list.ReorderTasks()

    list = guests.Lists.newElement(element.Order = 20)
    list.Name = "Branding"
    list.IndexPrefix = 'BRD'
        list.CreateTask('Product Naming and Branding', 'Develop a name, logo, and identity for the new motorcycle.', 0)
        list.CreateTask('Marketing Strategy', 'Plan campaigns, including online, print, and event-based marketing.', 0)
        list.CreateTask('Customer Engagement', 'Organize focus groups or pre-launch surveys to gather feedback.', 0)
        list.CreateTask('Dealer Partnerships', 'Establish relationships with dealerships or distributors for sales.', 0)
    list.ReorderTasks()


context App::iu
post:
    self.InitUsers

context App::InitUsers
post:
    -- Add sample users
    let alice: User = new User in
    alice.login = "alice@example.com"
    alice.Name = "Alice"

    let bob: User = new User in
    bob.login = "bob@example.com"
    bob.Name = "Bob"

    let guests: Group = new Group
    guests.Name = "Guests"

    let motorcycleCompany: Group = new Group
    motorcycleCompany.Name = "Alice & Bob"
    motorcycleCompany.AddUser(alice)
    motorcycleCompany.AddUser(bob)


context App::is
post:
    self.InitSample

context App::InitSample
pre Before app/InitSample call app/InitUsers and login.:
    user <> 0
post:
    --self.ClearData()

    --self.ResetDemoData()
    self.InitGuestsGroup()

    self.InitHomeGroups()

    -- Add sample users
    let alice: User = system.allInstances("User").select(element.Name = 'Alice').first in
    alice.CheckFolders()

    let bob: User = system.allInstances("User").select(element.Name = 'Bob').first in
    bob.CheckFolders()

    -- -------------------- Motorcycle's production --------------------------
    let motorcycleCompany: Group = system.allInstances("Group").select(element.Name = "Motorcycle's production").first in

    motorcycleCompany.AllTags = "#urgent #bug #feature #prototype"

    motorcycleCompany.CheckFolders()

    motorcycleCompany.AddGeneralMessageChannels()
    let channel: MessageChannel = alice.AddDirectMesssageChannel(bob)
    self.AddSampleConversation(channel, bob, alice)

    -- Add some data
    let list: TaskList in
    list = motorcycleCompany.Lists.newElement(element.Order = 0)

    -- list.TaskStates = '[{"name":"Required","state":0},{"name":"Running out","state":100},{"name":"Delivering","state":1000}]'
    let states: JsonObject = [
        {
            name: 'Preparing',
            state: 0
        },
        {
            name: 'In progress',
            state: 100
        },
        {
            name: 'Done',
            state: STATE_FINISHED
        }
    ]

    list.TaskStates = states.ToString()

    list.Name = "Design"
    list.IndexPrefix = 'DGN'
        list.CreateTask('Target Audience Definition', 'Identify the specific demographics and needs of the intended buyers', STATE_FINISHED, '#urgent', alice)

            list.Tasks.last.Description = '<h1>Description with images</h1>
            <p>Deer</p>
            <img alt="Deer" src="" data-path="group/Lists/19/Tasks/71/Images/blob?key=deer.jpg"/>
            <p>Flowers</p>
            <img alt="Flowers" src="" data-path="group/Lists/19/Tasks/71/Images/blob?key=flowers.png"/>
            <p>Tree</p>
            <img alt="Tree" src="" data-path="group/Lists/19/Tasks/71/Images/blob?key=tree.webp"/>
            '
            list.Tasks.last.Images = 'deer.jpg;flowers.png;tree.webp'

        list.CreateTask('Design Goals', 'Establish core objectives (e.g., performance, style, price range, features).', STATE_FINISHED, '', alice)
        list.CreateTask('Concept Design', 'Create initial sketches and 3D models of the motorcycle.', 100, '#prototype', alice)
        list.CreateTask('Engineering Design', 'Develop detailed technical specifications, including frame, engine, and suspension.', 0, '#prototype');
        list.Tasks.last.AttachedFiles='lorem.txt';

        list.CreateTask('Ergonomics Testing', 'Ensure the motorcycle provides a comfortable and functional ride for the target user.', 0, '#prototype')
        list.CreateTask('Prototype Development', "Build a working prototype to test the design and functionality", 0, '#prototype')
    list.ReorderTasks()

    list = motorcycleCompany.Lists.newElement(element.Order = 10)
    list.Name = "Engineering"
    list.IndexPrefix = 'ENG'
        list.CreateTask('Performance Testing', 'Test the prototype for speed, handling, durability, and efficiency.', 0)
        list.CreateTask('Safety Testing', 'Ensure compliance with safety regulations and conduct crash tests where necessary.', 0)
        list.CreateTask('Environmental Compliance', 'Meet emissions standards and other environmental regulations.', 0)
        list.CreateTask('Refinement', 'Address issues identified during testing, including mechanical, aesthetic, and ergonomic concerns.', 0)
    list.ReorderTasks()

    list = motorcycleCompany.Lists.newElement(element.Order = 20)
    list.Name = "Branding"
    list.IndexPrefix = 'BRD'
        list.CreateTask('Product Naming and Branding', 'Develop a name, logo, and identity for the new motorcycle.', 0)
        list.CreateTask('Marketing Strategy', 'Plan campaigns, including online, print, and event-based marketing.', 0)
        list.CreateTask('Customer Engagement', 'Organize focus groups or pre-launch surveys to gather feedback.', 0)
        list.CreateTask('Dealer Partnerships', 'Establish relationships with dealerships or distributors for sales.', 0)
    list.ReorderTasks()



    ------------------------------  Publishing company -------------------------------

    let publishingCompany: Group = new Group
    publishingCompany.Name = 'Publishing company'
    publishingCompany.Lists.removeAll
    publishingCompany.AddUser(alice)
    publishingCompany.AddUser(bob)

    publishingCompany.CheckFolders

    -- Add some data
    list = publishingCompany.Lists.newElement(element.Order = 0)
    list.Name = "Publishing"
    list.IndexPrefix = 'PUB'
        list.CreateTask('Writing', '', 0)
        list.CreateTask('Editing', '', 0)
        list.CreateTask('Typesetting', '', 0)
        list.CreateTask('Cover design', '', 0)
        list.CreateTask('ISBN', '', 0)
        list.CreateTask('Copyright', '', 0)
    list.ReorderTasks()

    list = publishingCompany.Lists.newElement(element.Order = 20)
    list.Name = "Marketing and Sales"
    list.IndexPrefix = 'MAS'
        list.CreateTask('Promotion plan', '', 0)
        list.CreateTask('Promo materials', '', 0)
        list.CreateTask('Contact with media', '', 0)
        list.CreateTask('Book launch', '', 0)
        list.CreateTask('Choosing sales platforms', '', 0)
        list.CreateTask('Shipping logistics', '', 0)
    list.ReorderTasks()



context TaskList::ReorderTasks()
post:
    let order: integer = MIN_USER_TASK_ORDER in
    self.Tasks.orderedBy('ListOrder').forAll(element.ListOrder = order and order = order + 1)
    order = (order - MIN_USER_TASK_ORDER) * ORDER_STEP
    self.Tasks.orderedBy('ListOrder').revForAll(element.ListOrder = order and order = order - ORDER_STEP)



context Group::AddUser(u: User)
pre:
    u <> null
post:
    self.Members.newElement(element.User = u)


context Group::CheckFolder(Title: string)
post:
    if not self.Folders.select(e | e.Title = Title).exists then
        let f: Folder = self.Folders.newElement() in
        f.Title = Title
        f.CreateSubFolders(3)
        f.CreateTasks(5)
        f.CreateNotes(4)
        f.ReorderElements()
    end if

context Group::NewFolder(t: string)
post:
    self.Folders.newElement(e | e.Title = t)

context Group::CheckFolderEx(Title: string)
post:
    if not self.Folders.select(e | e.Title = Title).exists then
        let f: Folder = self.Folders.newElement(e | e.Title = Title) in
        f.CreateSubFolders(3)
        f.CreateTasks(5)
        f.CreateNotes(4)
        f.ReorderElements()
    end if

context Group::CheckFolders
post:
    self.CheckFolder("Notes")
    self.CheckFolder("Projects")
    self.CheckFolder("Ideas")

context Group::CheckFoldersEx
post:
    self.CheckFolderEx("Notes")
    self.CheckFolderEx("Projects")
    self.CheckFolderEx("Ideas")


context Group::DeleteAllFolders
post:
    self.AllFolders.removeAll


context User::CheckFolder(Title: string)
post:
    if not self.Folders.select(e | e.Title = Title).exists then
        let f: Folder = self.Folders.newElement() in
        f.Title = Title
        f.CreateSubFolders(3)
        f.CreateTasks(3)
        f.CreateNotes(3)
        f.ReorderElements()
    end if

context User::CheckFolderEx(Title: string)
post:
    if not self.Folders.select(e | e.Title = Title).exists then
        let f: Folder = self.Folders.newElement(e | e.Title = Title) in
        f.CreateSubFolders(3)
        f.CreateTasks(3)
        f.CreateNotes(3)
        f.ReorderElements()
    end if


context Folder::CreateSubFolders(no: integer)
post:
    set(1 .. no).forAll(i | self.CreateSubFolder(self.Title + " F" + i))




context Folder::CreateNotes(no: integer)
post:
    set(1 .. no).forAll(i | self.CreateNote(self.Title + " Note " + i))

context Folder::CreateNote(Title: string)
post:
    let note: Note = user.CreatedNotes.newElement(note | note.Title = Title) in

    self.Notes.newElement(nn | nn.Note = note)

context Folder::CreateTasks(no: integer)
post:
    set(1 .. no).forAll(i | self.CreateTask(self.Title + " Task " + i))

context Folder::CreateTask(Title: string)
post:
    let task: Task = user.CreatedTasks.newElement(task | task.Title = Title) in
    self.Tasks.newElement(tt | tt.Task = task)


context User::CheckFolders
post:
    self.CheckFolder("My Notes")
    self.CheckFolder("My Projects")
    self.CheckFolder("My Ideas")
    self.GetBasketFolder()
    self.GetPinnedFolders()
    self.ReorderFolders()

context User::ReorderFolders()
post:
    let order: integer = MIN_USER_TASK_ORDER in
    self.Folders.orderedBy('Order').forAll(element.Order = order and order = order + 1)
    order = (order - MIN_USER_TASK_ORDER) * ORDER_STEP
    self.Folders.orderedBy('Order').revForAll(element.Order = order and order = order - ORDER_STEP)


context Folder::ReorderSubFolders()
post:
    let order: integer = MIN_USER_TASK_ORDER in
    self.Folders.orderedBy('Order').forAll(element.Order = order and order = order + 1)
    order = (order - MIN_USER_TASK_ORDER) * ORDER_STEP
    self.Folders.orderedBy('Order').revForAll(element.Order = order and order = order - ORDER_STEP)


context Folder::ReorderNotes()
post:
    let order: integer = MIN_USER_TASK_ORDER in
    self.Notes.orderedBy('Order').forAll(element.Order = order and order = order + 1)
    order = (order - MIN_USER_TASK_ORDER) * ORDER_STEP
    self.Notes.orderedBy('Order').revForAll(element.Order = order and order = order - ORDER_STEP)


context Folder::ReorderTasks()
post:
    let order: integer = MIN_USER_TASK_ORDER in
    self.Tasks.orderedBy('Order').forAll(element.Order = order and order = order + 1)
    order = (order - MIN_USER_TASK_ORDER) * ORDER_STEP
    self.Tasks.orderedBy('Order').revForAll(element.Order = order and order = order - ORDER_STEP)

context Folder::ReorderElements()
post:
    self.ReorderSubFolders()
    self.ReorderNotes()
    self.ReorderTasks()


context Group::AddGeneralMessageChannels()
post:
    self.AddGeneralMessageChannel("Announcements")
    self.AddGeneralMessageChannel("Bugs")
    self.AddGeneralMessageChannel("Feedback")
    self.AddGeneralMessageChannel("General")
    self.AddGeneralMessageChannel("Random")


context App::AddSampleConversation(channel: MessageChannel, bob: User, alice: User): MessageChannel
post:
    channel.Messages.removeAll
    let msg: Message in
    msg = channel.Messages.newElement(element.Author = bob and element.Date=2025.04.08 and element.Date.Time ="09:02"
            element.Text = "Hi Alice,\nI hope your morning is going well. I've just finished reading the initial draft of the client proposal. There's a lot of good content there, but I had a couple of thoughts I wanted to run by you before we move forward.")


    msg = channel.Messages.newElement(element.Author = alice and element.Date=2025.04.08 and element.Date.Time="11:18"
            element.Text = "Hi Bob,\nThanks for the feedback. I'm glad you had a look at it. I agree—it's starting to come together. Let me know which parts you'd like to discuss. I'm happy to make adjustments if something doesn't align with the client's expectations.")


    msg = channel.Messages.newElement(element.Author = bob and element.Date=2025.04.08 and element.Date.Time="16:47"
            element.Text = "Great. One thing I noticed was that the timeline section might be a bit too optimistic, especially given the recent delays on the vendor side. I think we should consider padding it slightly to manage expectations.")


    msg = channel.Messages.newElement(element.Author = alice and element.Date=2025.04.09 and element.Date.Time="11:18"
            element.Text = "That's a good point. I was thinking the same, especially since we're still waiting for final confirmation from the design team.\nWe could shift the delivery estimate by a week and add a note explaining the reasoning. That way, it's transparent, but not alarming.")


    msg = channel.Messages.newElement(element.Author = bob and element.Date=2025.04.09 and element.Date.Time="13:26"
            element.Text = "I like that approach. It sounds reasonable and professional.\nAlso, did you get a chance to check in with Sam regarding the cost estimates? I think we're still missing the final numbers for the second phase of the project.")


    msg = channel.Messages.newElement(element.Author = alice and element.Date=2025.04.11 and element.Date.Time="08:55"
            element.Text = "Yes, I followed up with him this morning. He said he's finalizing those figures and will send them over by the end of the day. I'll keep an eye out and forward them to you as soon as they arrive.")


    msg = channel.Messages.newElement(element.Author = bob and element.Date=2025.04.11 and element.Date.Time="12:11"
            element.Text = "Perfect, thanks.\nLet's regroup tomorrow after we've got all the numbers. I'll prepare a summary doc in the meantime and send it to you for review.")


    msg = channel.Messages.newElement(element.Author = alice and element.Date=2025.04.11 and element.Date.Time="14:39"
            element.Text = "Sounds like a plan. Thanks for staying on top of this, Bob.")
