const ACC_DENIED = 0
const ACC_READ   = 1
const ACC_WRITE  = 2
const ACC_FULL   = 3

access role Guest
    acc App = ACC_READ
    
    acc Group = 
        if self.IsPublic then
            ACC_FULL
        else if user<>null and user.IsInGroup(self) then
            ACC_READ
        else
            ACC_DENIED
        end if
        end if

    acc TaskList = 
        if self.Group.IsPublic then
            ACC_FULL
        else if user<>null and user.IsInGroup(self.Group) then
            ACC_READ
        else
            ACC_DENIED
        end if
        end if

    acc Task = 
        if self.TaskList.Group.IsPublic then
            ACC_FULL
        else if user<>null and user.IsInGroup(self.TaskList.Group) then
            ACC_READ
        else
            ACC_DENIED
        end if
        end if

    acc User = 
        if user<>null then
            if self.Id = user.Id then
                ACC_FULL
            else if user.Groups.exists(element.User = self) then
                ACC_READ
            end if
            end if
        else
            ACC_DENIED
        end if

    nav Group, UserGroup, TaskList, Task, TaskStep

access role GroupOwner: Employee
    acc App = ACC_READ
    
    acc Group =
        if self.IsPublic or user.IsInGroup(self) then
            ACC_FULL
        else
            ACC_DENIED
        end if

    acc TaskList =
        if self.Group.IsPublic or user.IsInGroup(self.Group) then
            ACC_FULL
        else
            ACC_DENIED
        end if

    acc Task = 
        if self.Actor = user or self.TaskList.Group.IsPublic or user.IsInGroup(self.TaskList.Group) then
            ACC_FULL
        else
            ACC_DENIED
        end if

    acc User = 
        if self.Id = user.Id then
            ACC_FULL
        else if user.Groups.exists(element.User = self) then
            ACC_READ
        else
            ACC_DENIED
        end if
        end if
        
    acc Folder = 
        if self.GroupId = group.Id then
            ACC_FULL
        else 
            self.CalculateAccessLevel
        end if     
    
    acc FolderFolder = 
        if self.GroupId = group.Id then
            ACC_FULL
        else
            ACC_READ    
        end if    
            

    nav Group, UserGroup, User, TaskList, Task, TaskStep


context User::IsInGroup(g: Group): boolean
post:
    result = self.Groups.exists(element.Group = g)

context Folder::CalculateAccessLevel: integer
post:
    result = ACC_DENIED
    if self.IsPublic then
        result = ACC_FULL
    else 
        if self.IsShared then
            if self.InFolders.exists(element.GroupId = group.Id) then
                result = ACC_READ       
            end if
        end if
    end if    