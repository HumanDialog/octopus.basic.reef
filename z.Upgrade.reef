context App::vmd
post:
  self.VerifyMissingData

admin context App::VerifyMissingData
post:
  let guests: Group = system.allInstances("Group").select(element.Name = "Guests").first
  if guests = 0 then
      guests = new Group
      guests.Name = "Guests"
  end if

  system.allInstances("Group").forAll(e | e.VerifyFolders)
  system.allInstances("Group").forAll(e | e.VerifyTaskLists)
  system.allInstances("Group").forAll(e | e.VerifyMessageChannels)

  system.allInstances("User").forAll(e | e.VerifyFolders)

  --group.AddGeneralMessageChannels



context Group::VerifyTaskLists()
post:
   if self.Lists.first = 0 then
      self.CreateList("Things to to")
   end if
   self.Lists.forAll(element.Verify)

context TaskList::Verify
post:
  if self.TaskStates = "" then
     self.TaskStates = self.Group.GetChecklistDefaultColumns().ToString()
  end if

context Group::VerifyMessageChannels()
post:
  if  self.MessageChannels.first = 0 then
      self.AddGeneralMessageChannel("Announcements")
      self.AddGeneralMessageChannel("Bugs")
      self.AddGeneralMessageChannel("Feedback")
      self.AddGeneralMessageChannel("General")
      self.AddGeneralMessageChannel("Random")
  end if



context Group::CreateSimpleDiscussionsStructure(): Folder
post:
    let discussions: Folder = self.Folders.newElement(element.Title = "__; en: Discussions; es: Debates; pl: Dyskusje" and element.Summary="__; en: Ongoing support questions; es: Preguntas sobre asistencia continua; pl: Bieżące pytania dotyczące wsparcia")
    discussions.Kind = FK_DISCUSSION

    let link: FolderFolder

    link = discussions.CreateSubFolder("Feature requests",                  "Would you like to see a new feature in Tilos? Write about it here", 0 * ORDER_STEP, FK_DISCUSSION)
    link = discussions.CreateSubFolder("General",                           "General discussions whose topic does not fit after the below ones", 1 * ORDER_STEP, FK_DISCUSSION)
    link = discussions.CreateSubFolder("Installation and Licensing",        "", 2 * ORDER_STEP, FK_DISCUSSION)
    link = discussions.CreateSubFolder("Get Started",                       "", 3 * ORDER_STEP, FK_DISCUSSION)
    link = discussions.CreateSubFolder("Structures",                        "", 17 * ORDER_STEP, FK_DISCUSSION)
    link = discussions.CreateSubFolder("Libraries",                         "", 18 * ORDER_STEP, FK_DISCUSSION)

    result = discussions


context App::SetupDefaultCanonicalLocations: string
post:
  result = self.SetupDefaultCanonicalLocationsA()

admin context App::SetupDefaultCanonicalLocationsA: string
post:
  self.Groups.forAll(element.SetupDefaultCanonicalLocations())
  self.Users.forAll(element.SetupDefaultCanonicalLocations())
  result = 'Success'


context Group::SetupDefaultCanonicalLocations
post:
  self.Folders.forAll(element.SetupDefaultCanonicalLocations())
  self.SharedFolders.SetupDefaultCanonicalLocations()


context User::SetupDefaultCanonicalLocations
post:
  self.Folders.forAll(element.SetupDefaultCanonicalLocations())
  self.SharedFolders.SetupDefaultCanonicalLocations()

context Folder::SetupDefaultCanonicalLocations
post:
  self.Folders.forAll(link: FolderFolder |
    if not link.Folder.InFolders.exists(element.IsCanonical) then
      link.LinkInfo = link.LinkInfo | FLI_CANONICAL
    end if
  )
  
  self.Tasks.forAll( element.Task.SetupDefaultCanonicalLocations() )
  self.Notes.forAll( element.Note.SetupDefaultCanonicalLocations() )

  self.Folders.forAll( element.Folder.SetupDefaultCanonicalLocations() )

context Note::SetupDefaultCanonicalLocations
post:
  let folderNote: FolderNote
  let taskNote: TaskNote
  let noteNote: NoteNote

  if self.InNotes.count > 0 then
    if not self.InNotes.exists(element.IsCanonical) then
      noteNote = self.InNotes.first
      noteNote.LinkInfo = noteNote.LinkInfo | FLI_CANONICAL
    end if
  else
    if self.InTasks.count > 0 then
      if not self.InTasks.exists(element.IsCanonical) then
        taskNote = self.InTasks.first
        taskNote.LinkInfo = taskNote.LinkInfo | FLI_CANONICAL
      end if
    else
      if self.InFolders.count > 0 then
        if not self.InFolders.exists(element.IsCanonical) then
          folderNote = self.InFolders.first
          folderNote.LinkInfo = folderNote.LinkInfo | FLI_CANONICAL
        end if
      end if
    end if
  end if


context Task::SetupDefaultCanonicalLocations
post:
  let folderTask: FolderTask

  if self.InFolders.count > 0 then
    if not self.InFolders.exists(element.IsCanonical) then
      folderTask = self.InFolders.first
      folderTask.LinkInfo = folderTask.LinkInfo | FLI_CANONICAL
    end if
  end if


context App::RecalculateCanonicalPaths: string
post:
  result = self.RecalculateCanonicalPathsA()

admin context App::RecalculateCanonicalPathsA: string
post:
  self.Groups.forAll( element.ValidateSubTreeCanonicalPaths() )
  self.Users.forAll( element.ValidateSubTreeCanonicalPaths() )
  result = 'Success'