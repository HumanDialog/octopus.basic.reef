-- Genaral status of Tasks, TaskLists and Projects
const STATUS_ACTIVE = 0     -- This is a data we usually work on
const STATUS_ARCHIVED = 1

const STATE_UNSPECIFIED       = 0     -- [000-999]
const STATE_IN_PREPARATION    = 1000  -- [1000-1999]
const STATE_PLANNED           = 2000  -- [2000-2999]
const STATE_READY             = 3000  -- [3000-3999]
const STATE_EXECUTING         = 4000  -- [4000 - 6999]
const STATE_FINISHED          = 7000  -- [7000 - 7999]
const STATE_CLOSED            = 8000  -- [8000 - 8999]
const STATE_ARCHIVED          = 9000  -- [9000 - 9999]

--?enum state = [draft: 0, prepared: 1, accepted: 100, started: 101]
const ORDER_STEP        = 64


class Task
    Title(128):             string
    Summary(196):	        string
    Tags(64):               string
    Index(16):              string
    Kind:                   integer
    State:                  integer
    CreatedBy:              User <backNav: CreatedTasks>
    Actor:                  User
    DueDate:		        date
    Effort:                 integer
    Status:                 integer


    Steps[0..n]:	        TaskStep
    Description:	        string
    Images:                 string      <readOnly>
    AttachedFiles:          string      <readOnly>

    TaskList(0..1):         TaskList    <backNav: AllTasks>
    InFolders[0..n]:        FolderTask
    Notes[0..n]:            TaskNote
    InMessages[0..n]:       MessageTask
    ListOrder:              integer
    UserOrder:              integer

    TaskListId:             integer
    ActorId:                integer
    CreatedById:            integer
end class


class TaskStep
    Label:                  string
    Done:                   boolean
    Order:                  integer
end class

class TaskNote
    Note:                   Note <backNav: InTasks>
    Task:                   Task <backNav: Notes>
end class


constraint Task::TaskList
    self.TaskListId = element.Id


context Task::Finish()
post:
    self.ChangeTaskState(STATE_FINISHED)


context Task::Archive()
post:
    self.Status = STATUS_ARCHIVED

context Task::MainPage: string
post:
    result = "TaskDoc/"+self.Id

context Task::href: string
post:
    result = '/task/' + self.Id


context Task::DeletePermanently
post:
    self.InFolders.removeAll
    self.InMessages.removeAll
    self.Notes.removeAll
    self.delete


context Task::ChangeTaskState(newState: integer)
post:
    if self.State <> newState then
        self.State = newState
    end if

context Task::ReduceStateToBase()
post:
    let newState: integer = -1
    if self.State < STATE_UNSPECIFIED then
        newState = STATE_UNSPECIFIED
    else if self.State > STATE_UNSPECIFIED and self.State < STATE_IN_PREPARATION then
        newState = STATE_UNSPECIFIED
    else if self.State > STATE_IN_PREPARATION and self.State < STATE_PLANNED then
        newState = STATE_IN_PREPARATION
    else if self.State > STATE_PLANNED and self.State < STATE_READY then
        newState = STATE_PLANNED
    else if self.State > STATE_READY and self.State < STATE_EXECUTING then
        newState = STATE_READY
    else if self.State > STATE_EXECUTING and self.State < STATE_FINISHED then
        newState = STATE_EXECUTING
    else if self.State > STATE_FINISHED and self.State < STATE_CLOSED then
        newState = STATE_FINISHED
    else if self.State > STATE_CLOSED and self.State < STATE_ARCHIVED then
        newState = STATE_ARCHIVED
    else if self.State > STATE_ARCHIVED then
        newState = STATE_ARCHIVED
    end if  end if    end if     end if  end if   end if    end if     end if  end if

    if newState >= 0 then
        self.ChangeTaskState(newState)
    end if


context Task::MoveToList(list: TaskList, optional order: integer = 0)
post:
    self.TaskList = list
    self.ReduceStateToBase()
    if order <> 0 then
        self.ListOrder = order
    end if

context Task::CopyToBasket(): FolderTask
post:
    let basket: Folder = user.BasketFolder

    if not basket.Tasks.exists(element.Task.Id = self.Id) then
        result = basket.Tasks.newElement(e | e.Task = self and e.Order = basket.MaxOrder + ORDER_STEP)
    end if

context Task::TogglePinned : FolderTask
post:
    let pinnedLink :FolderTask = user.PinnedFolders.Tasks.select(element.Task.Id = self.Id).first
    if pinnedLink <> null then
        pinnedLink.delete
        result = null
    else
        let maxOrder: integer = 0
        if user.PinnedFolders.Tasks.count > 0 then
            maxOrder = user.PinnedFolders.Tasks.max(element.Order)
        else if user.PinnedFolders.Notes.count > 0 then
            maxOrder = user.PinnedFolders.Notes.max(element.Order)
        else
            maxOrder = user.PinnedFolders.Folders.max(element.Order)    
        end if
        end if

        result = user.PinnedFolders.Tasks.newElement(e | e.Task = self and e.Order = maxOrder+ORDER_STEP)
    end if

context Task::IsPinned: boolean
post:
    result = user.PinnedFolders.Tasks.exists(element.Task.Id = self.Id)
