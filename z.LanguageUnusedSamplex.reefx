
--WORKING SAMPLE
context App::AT1: string
post:
    let b: string = 'blue' in
    let y: string = 'yellow' in
    let s: string in
    let object: JsonObject in
    let labels: JsonObject in 
    let bwlabels: JsonObject in
 
    labels = ['X','Y','Z','A','B','C','D','E']   
    labels = ['red_label', 'green_label']
    bwlabels = [{label:'white_label', value: 999999}, {label:'black_label', value: 0}, {label:'grey_label', value: 555555}]   
            
    labels = [..., b + '_label', y + '_label', ...bwlabels]        
    
    object = {
        title: b + '/' + y,
        labels: ...labels
    }

    s = object.ToString
    result = s 
    
    
    
--NON WORKING SAMPLE
context App::AT2: string
post:
    let b: string = 'blue' in
    let y: string = 'yellow' in
    let s: string in
    let object: JsonObject in
    let labels: JsonObject in 
    let bwlabels: JsonObject in
    let orange: JsonObject in
 
    labels = ['X','Y','Z','A','B','C','D','E']   
    labels = ['red_label', 'green_label']
    bwlabels = [{label:'white_label', value: 999999}, {label:'black_label', value: 0}, {label:'grey_label', value: 555555}]   
    
    orange = {label:"orange_label", value: 999900}
            
    -- error: labels = [..., b + '_label', y + '_label', orange, ...bwlabels]        
    
    object = {
        title: b + '/' + y,
        labels: ...labels
    }

    s = object.ToString
    result = s 
    
    
    
context App::AT21: string
post:
    let s: string = 'blue' in
    let i: integer = 1000 in
    let json: JsonObject = new JsonObject in
    let jarray: JsonObject = new JsonObject in
    let labels: JsonObject in 
    
    json = {
            property1:      s + ' sky', 
            2:              "two", 
            "property 3":   "three",
            values:         [1,2,3*i,4,5,6,7,8,9,0],
            colors:         ['red', 'green', s],
            "my cars":      [
                {
                    model  :'Passat',
                    power  :   10
                },
                {
                    model  :'Golf',
                    power  :   7
                }
            ] 
            }
            
    labels = new JsonObject        
    labels = ['label_red', 'label_green', 'label_' + s]        
    jarray = [
                {
                    model  :'Picasso',
                    power  :   10
                },
                {
                    model  :'Megane',
                    power  :   7
                }
            ] 

    let body: JsonObject in
    body = {
        Content: {
            Simple: {
                Body: {
                    Text: {
                        Charset: "UTF-8",
                        Data: "Hello from ObjectReef service"
                    }
                },
                Subject: {
                    Charset: "UTF-8",
                    Data: "Hello"
                }
            }
        },
        Destination: {
            ToAddresses: ["swobodny.elektron@gmail.com"]
        },
        FromEmailAddress: "noreply@objectreef.dev"
    }
    
            
    --s = json.property1         
    --i = json['my cars'].count        
    --json['my cars'].forAll(s = s + element.model)
    --s = json['my cars'].at(1).model
    --s = json.ToString        
    --i = json.values.count
    --i = json.values[2]
    --s = json['my cars'][1].model --puste - ok
    let property: string = 'color' in
    let index: integer = 1  in 
    s = json[property][index]
    
    let models: string  in 
    json['my cars'].forAll(models = models + element.model)
    s = '1: ' + json.property1 + ", 2: " + json[property +'s'][index + 1] + ", 3: " + labels[2] + ", 4: " + json['my cars'].count + ", 5: " + models + ", 6: " + json['my cars'].at(1).model + ", 7: " + jarray.at(1).model + ", 8: " +  json.values.count + ", 9: " + json.values[2]
    --s = jarray.at(1).model
    result = s   




--WHEN PARSE STARTS WORKING
context TaskList::T1(): string
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)
    result = states.ToString
    
context TaskList::AddColumn2a(): JsonBuilder
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let builder: JsonBuilder = new JsonBuilder
    let newState :integer = states.select(element.state < 1000).max(element.state) + 1

    builder.StartTable()
        states.select(element.state < 1000).forAll(
            builder.StartObject()
                builder.PushKey("state").PushInteger(element.state)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )

        builder.StartObject()
            builder.PushKey("state").PushInteger(newState)
            builder.PushKey("name").PushString('Nowa')
        builder.EndObject()

        states.select(element.state >= 1000).forAll(
            builder.StartObject()
                builder.PushKey("state").PushInteger(element.state)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )

    builder.EndTable()

    result = builder


--TESTY
context App::Tuple: string
post:
    let b: string = 'blue' in
    let y: string = 'yellow' in
    let s: string in
    let object: JsonObject in
    let labels: JsonObject in 
    let bwlabels: JsonObject in
 
    labels = ['X','Y','Z','A','B','C','D','E']   
    labels = ['red_label', 'green_label']
    bwlabels = [{a:'white_label', b:'black_label'}]   
            
    labels = [..., b + '_label', y + '_label', ...bwlabels]        
    
    object = {
        title: b + '/' + y,
        labels: ...labels
    }

    s = object.ToString
    result = s 
    
    
context App::Res: string
post:
    let s: string = 'blue' in
    let i: integer = 1000 in
    let json: JsonObject = new JsonObject in
    let jarray: JsonObject = new JsonObject in
    let labels: JsonObject in 
    
    json = {
            property1:      s + ' sky', 
            2:              "two", 
            "property 3":   "three",
            values:         [1,2,3*i,4,5,6,7,8,9,0],
            colors:         ['red', 'green', s],
            "my cars":      [
                {
                    model  :'Passat',
                    power  :   10
                },
                {
                    model  :'Golf',
                    power  :   7
                }
            ] 
            }
            
    labels = new JsonObject        
    labels = ['label_red', 'label_green', 'label_' + s]        
    jarray = [
                {
                    model  :'Picasso',
                    power  :   10
                },
                {
                    model  :'Megane',
                    power  :   7
                }
            ] 

    let body: JsonObject in
    body = {
        Content: {
            Simple: {
                Body: {
                    Text: {
                        Charset: "UTF-8",
                        Data: "Hello from ObjectReef service"
                    }
                },
                Subject: {
                    Charset: "UTF-8",
                    Data: "Hello"
                }
            }
        },
        Destination: {
            ToAddresses: ["swobodny.elektron@gmail.com"]
        },
        FromEmailAddress: "noreply@objectreef.dev"
    }
    
            
    --s = json.property1         
    --i = json['my cars'].count        
    --json['my cars'].forAll(s = s + element.model)
    --s = json['my cars'].at(1).model
    --s = json.ToString        
    --i = json.values.count
    --i = json.values[2]
    --s = json['my cars'][1].model --puste - ok
    let property: string = 'color' in
    let index: integer = 1  in 
    s = json[property][index]
    
    let models: string  in 
    json['my cars'].forAll(models = models + element.model)
    s = '1: ' + json.property1 + ", 2: " + json[property +'s'][index + 1] + ", 3: " + labels[2] + ", 4: " + json['my cars'].count + ", 5: " + models + ", 6: " + json['my cars'].at(1).model + ", 7: " + jarray.at(1).model + ", 8: " +  json.values.count + ", 9: " + json.values[2]
    --s = jarray.at(1).model
    result = s   

    context TaskList::Test2(): JsonObject
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)
    result = states

context TaskList::Test: JsonBuilder
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let i: integer
    

    let builder: JsonBuilder = new JsonBuilder
    builder.StartTable()
        states.forAll(
            builder.StartObject()
                i = element.state
                builder.PushKey("state").PushInteger(i)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )
    builder.EndTable()

    result = builder

context TaskList::AddColumn2(): JsonBuilder
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let builder: JsonBuilder = new JsonBuilder
    let newState :integer = states.select(element.state < 1000).max(element.state) + 1

    builder.StartTable()
        states.select(element.state < 1000).forAll(
            builder.StartObject()
                builder.PushKey("state").PushInteger(element.state)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )

        builder.StartObject()
            builder.PushKey("state").PushInteger(newState)
            builder.PushKey("name").PushString('Nowa')
        builder.EndObject()

        states.select(element.state >= 1000).forAll(
            builder.StartObject()
                builder.PushKey("state").PushInteger(element.state)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )

    builder.EndTable()

    result = builder

context TaskList::AddColumn3(): string
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let newColumn: JsonObject = {
        name: 'New',
        state: 555
    }

    --let r: JsonObject = [..., newColumn]
    --result = r.ToString
    result = states.ToString
    
context TaskList::AddColumn4(): string
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let newColumn: JsonObject = [{
        name: 'New',
        state: 555
    }]

    let r: JsonObject
    r = []
    r = [..., ...states, ...newColumn]
    result = r.ToString

context TaskList::AddColumn4a(): string
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let newColumn: JsonObject = [{
        name: 'New',
        state: 555
    }]

    let r: JsonObject = []
    let a: JsonObject
    states.forAll(  a=[{state: element.state, name: element.name }] 
                    r=[...,...a])

    r = [..., ...newColumn]
    result = r.ToString    

context TaskList::AddColumn5(): string
post:
    --let states: JsonObject = [
    --    {
    --        name: 'A',
    --        state: 0
    --    },
    --    {
    --        name: 'B',
    --        state: 1
    --    }
    --]

    let newColumn: JsonObject = [{
        name: 'New',
        state: 555
    }]

    let r: JsonObject = []   
    r = [..., ...newColumn]
    result = r.ToString()

context TaskList::AddColumnX(): JsonBuilder
post:
    let states: JsonObject = new JsonObject
    states.Parse(self.TaskStates)

    let builder: JsonBuilder = new JsonBuilder
    let newState :integer = states.select(element.state < 1000).max(element.state) + 1

    let s: integer
    let maxs: integer


    builder.StartTable()
        states.select(element.state < 1000).forAll(
            builder.StartObject()
                builder.PushKey("state").PushInteger(element.state)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )

        builder.StartObject()
            builder.PushKey("state").PushInteger(newState)
            builder.PushKey("name").PushString('Nowa')
        builder.EndObject()

        states.select(element.state >= 1000).forAll(
            builder.StartObject()
                builder.PushKey("state").PushInteger(element.state)
                builder.PushKey("name").PushString(element.name)
            builder.EndObject()
        )

    builder.EndTable()

    result = builder
    
--TESTY
context App::TestRecord: integer
post:
    let bwlabels: JsonObject = [{label:'white_label', value: 999999}, {label:'black_label', value: 3}, {label:'grey_label', value: 555555}]  in
    let no: integer = bwlabels.select(element.get_jproperty_int("value") > 10).count
    result = no

--NON WORKING SAMPLE
context App::AT2: string
post:
    let b: string = 'blue' in
    let y: string = 'yellow' in
    let s: string in
    let object: JsonObject in
    let labels: JsonObject in 
    let bwlabels: JsonObject in
    let orange: JsonObject in
 
    labels = ['X','Y','Z','A','B','C','D','E']   
    labels = ['red_label', 'green_label']
    bwlabels = [{label:'white_label', value: 999999}, {label:'black_label', value: 0}, {label:'grey_label', value: 555555}]   
    
    orange = {label:"orange_label", value: 999900}
            
    --labels = [..., b + '_label', y + '_label', ...orange, ...bwlabels]        
    labels = [...orange, ...bwlabels]        
    
    object = {
        title: b + '/' + y,
        labels: ...labels
    }

    s = object.ToString
    result = s 
    
    
--IDEAL VERSION
context App::TT1: JsonObject
post:
    let i: integer = 10
    let j: integer = 15
    
    let arr: JsonObject = []
    
    arr = [..., 10, i, j, i + j]
    result = arr

context TaskList::AddColumn(pos: integer, optional state: integer, optional name: string): string
post:
    let prevStates: JsonObject = new JsonObject
    prevStates.Parse(self.TaskStates)

    let newColumn: JsonObject = [{
        name: name,
        state: state
    }]
    
    let states: JsonObject = []
    
    set(0 .. pos).forAll(i|
        states = [..., prevStates[i]]
    )
    states = [..., ...newColumn]
    
    result = prevStates.ToString
    
context TaskList::CC1
post:    
    let prevStates: JsonObject = new JsonObject
    prevStates.Parse(self.TaskStates)
    
    let states: JsonObject = []
    states = [..., prevStates]
    result = states.ToString


-----------------------------------------------------------------
    
context TaskList::CC1: string
post:    
    let prevStates: JsonObject = new JsonObject
    prevStates.Parse(self.TaskStates)
    
    let states: JsonObject 
    states = {prev: prevStates}
    result = states.ToString

context TaskList::CC2: string
post:
    let prevStates: JsonObject = new JsonObject
    prevStates.Parse(self.TaskStates)

    let newColumn: JsonObject = [{
        name: "NEW COLUMN",
        state: 4321
      }]
    
    let states: JsonObject = []
    states = [..., prevStates]
    
    states = [..., newColumn]
    
    result = states.ToString
    
context TaskList::AC: JsonObject
post:
    result = self.AddColumn(2, 777, "Hot")    
    
context TaskList::AddColumn(pos: integer, optional state: integer, optional name: string): JsonObject
post:
    let prevStates: JsonObject = new JsonObject
    prevStates.Parse(self.TaskStates)

    let newColumn: JsonObject = {
        name: name,
        state: state
    }
    
    let states: JsonObject = []
    
    let columnsNo: integer = prevStates.count 
    
    if pos > 0 then
        set(0 .. pos - 1).forAll(i |
            states = [..., prevStates[i]]
        )
    end if    
    states = [..., newColumn]
    if pos < columnsNo then
        set(pos .. columnsNo).forAll(j |
            states = [..., prevStates[i]]
        )
    end if    
    
    result = states
    
-------------
context App::PX: JsonObject
post:
    let src: JsonObject = [{id:1,v:"a"},{id:2,v:"b"},{id:3,v:"c"}]
    let res: JsonObject 
    res = src[1]
    result = res

context App::PX: string
post:
    let src: JsonObject = [{id:1,v:"a"},{id:2,v:"b"},{id:3,v:"c"}]
    let sres: string 
    let jres: JsonObject
    sres = src[1].v
    jres = src[0]
    -- result = jres.ToString -- Nie działa!
    result = jres.v
