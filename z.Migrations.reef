
context App::MigrateStructure(FromVersion: string): string
post:
    select case FromVersion
        case "1.0.1"
            result = self.MigrateFrom_101_to_136()
        case "1.3.3"
            result = self.MigrateFrom_133_to_134()
        case "1.1.0"
            result = self.MigrateFrom110()
        case "1.0.0"
            result = self.MigrateFrom100()
        case else
            result = "No special structure treatment when migrating from version " + FromVersion
    end select


context App::MigrateFrom_101_to_136: string
post:
    result = "Migration from 1.0.1 to 1.3.6:\n"
    result = result + self.Punch_TLK_constants()
    result = result + self.Punch_TaskState_constants()


context App::MigrateFrom_133_to_134: string
post:
    result = "Migration from 1.3.3 to 1.3.4:\n"
    result = result + self.Punch_TLK_constants()
    result = result + self.Punch_TaskState_constants()



context App::Punch_TLK_constants
post:
    system.allInstances("TaskList").forAll(list |
        if list.Kind = 1 then
            list.Kind = TLK_LIST
        else if list.Kind = 2 then
            list.Kind = TLK_CALENDAR
        else 
            list.Kind = TLK_KANBAN_CHECKLIST
        end if 
        end if        
    )


context App::Punch_TaskState_constants
post:
    -- STATE_ ... changes
    result = result + "\t* Punching Tasks's States\n"

    system.allInstances("TaskList").forAll(list |
        list.MigrateTaskStatesFrom133to134() )

    system.allInstances("Task").forAll( task | 
        if task.State = 1000 then
            task.State = STATE_FINISHED
        else if task.State > 1000 then      -- fix when tasks were on kanban column with state greater than 1000
            task.State = task.State - 900
        end if
        end if
    )


context TaskList::MigrateTaskStatesFrom133to134
post:
    if self.TaskStates.Len <> 0 then
        let prevStates: JsonObject = new JsonObject
        prevStates.Parse(self.TaskStates)

        let statesNo: integer = prevStates.count
        let newStates: JsonObject = []

        let stateValue: integer = 0
        let stateName: string
        let newState: JsonObject

        set(0 .. statesNo-1).forAll(i | 
            stateValue = prevStates[i].state
            if stateValue = 1000 then
                stateValue = STATE_FINISHED
            else if stateValue > 1000 then
                stateValue = stateValue - 900
            end if
            end if

            stateName = prevStates[i].name
            newState = {
                state: stateValue,
                name: stateName
            }
            
            newStates = [..., newState]
        )

        self.TaskStates = newStates.ToString()

    end if

context App::MigrateFrom110(): string
post:
    result = "Migration to 1.2.0:\n"
    result = result + "TaskList::Summary field added for:\n"
    system.allInstances("TaskList").forAll( result = result + element.Name + "\n")


context App::MigrateFrom100(): string
post:
    result = ""

    let g: Group = new Group

    -- removing default Things to do list created on Group::OnAfterCreate
    g.Lists.removeAll
    
    g.IsPublic = false
    g.Name = "Human Dialog"
    result = result + "Group " + g.Name + " created"

    -- Group::Members
    system.allInstances("User").forAll(g.AddUser(element))  
    result = result + "Users added: " + g.Members.count + "\n"
    
    system.allInstances("TaskList").select(element.Archived = true).forAll(element.Status = TLS_GROUP_ARCHVIVED_LIST)
    system.allInstances("TaskList").forAll(element.Group = g)
    result = result + "Lists added: " + g.AllLists.count + "\n"
    
    -- hardcoded because no such properties in App anymore
    g.AllTags = "#Error:bg-red-600 #Sample:bg-rose-600 #Svelte:bg-violet-600 #AWS:bg-orange-600 #cluster:bg-sky-600 #auth:bg-emerald-600 #Feature:bg-blue-600 #Model:bg-sky-600 #docs:bg-violet-600 #general:bg-blue-600 #Rvm:bg-fuchsia-600 #??:bg-rose-600 #blog:bg-lime-600 #Firma:bg-emerald-600"
    g.ListIndexPrefix = 'OCT'
    g.TaskIndexCounter = 314
    
    