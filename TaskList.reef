const TLK_KANBAN    =  0
const TLK_LIST      =  1
const TLK_CALENDAR  =  2
const TLK_DAY       = 10
const TLK_WEEK      = 11
const TLK_MONTH     = 12

const TLS_GROUP_ACTIVE_LIST     = 0
const TLS_GROUP_ARCHVIVED_LIST  = 1000


class TaskList
    Name:                   string
    Summary:                string
    Tasks(0..n):            Task     
    AllTasks(0..n):         Task    <backNav: TaskList>
    Order:                  integer
    TaskStates:             string
    Archived:               boolean
    IndexPrefix:            string
    Kind:                   integer
    Status:                 integer
    Group:                  Group
    InGroup:                Group
    GroupId:                integer
end class
 

constraint TaskList::Tasks
    element.TaskListId = self.Id and element.Status = STATUS_ACTIVE
 


constraint TaskList::AllTasks
    element.TaskListId = self.Id 


constraint TaskList::Group
    self.GroupId = element.Id
    
context TaskList::SwitchToList    
post:
    self.Kind = TLK_LIST
    
context TaskList::SwitchToKanban    
post:
    self.Kind = TLK_KANBAN
    
context TaskList::SwitchToCalendar    
post:
    self.Kind = TLK_CALENDAR    
    
context TaskList::href: string
post:
    select case self.Kind
    case TLK_KANBAN --0:  
        result = '/listboard/' + self.Id 
    case TLK_LIST    
        result = '/tasklist/' + self.Id
    case TLK_CALENDAR
        result = '/listboard/' + self.Id      
    case TLK_DAY
        result = '/tasklist/' + self.Id
    case else
        result = '/tasklist/' + self.Id
    end select    
                


context TaskList::FinishAll()
post:
    self.Tasks.select(element.State <> STATE_FINISHED).forAll(element.Finish())


context TaskList::Archive()
post:
    self.Tasks.forAll(element.Archive())
    self.Archived = true


context TaskList::CreateTaskEx(properties: JsonObject): Task
post:
    let task: Task = new Task
    self.Tasks.insert(task)
    
    task.Title = properties.Title
    task.Summary = properties.Summary
    task.Description = properties.Description
    task.ListOrder = properties.ListOrder
    task.State = properties.State
    task.Tags = properties.Tags
    task.Status = STATUS_ACTIVE

    if self.IndexPrefix.Len <> 0 then
        task.Index = self.IndexPrefix + '-' + (self.Tasks.count + 1)
    else 
        self.Group.TaskIndexCounter = self.Group.TaskIndexCounter + 1
        task.Index = self.Group.ListIndexPrefix + '-' + self.Group.TaskIndexCounter
    end if

    
    result = task


context TaskList::CreateTask(title: string, summary: string, state: integer, optional tags: string, optional actor: User): Task
post:
    let props :JsonObject = {
        Title: title,
        Summary: summary,
        State: state,
        Tags: tags
    }

    result = self.CreateTaskEx(props)
    result.Actor = actor





