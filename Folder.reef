
const FS_SHARED_FOLDER      = 9
const FS_PUBLIC_FOLDER      = 10
const FS_USER_ROOT_FOLDER   = 101
const FS_GROUP_ROOT_FOLDER  = 102
const FS_PINNED_ROOT_FOLDER = 103
const FS_BASKET_ROOT_FOLDER = 104

const FK_BASKET             = 101

class Folder
    Title(128):         string
    Summary(196):       string
    Group:              Group       <backNav: AllFolders>
    User:               User        <backNav: Folders>
    FolderOwner:        User        <backNav: AllFolders>
    Kind:               integer
    Status:             integer
    Folders[0..n]:      FolderFolder
    InFolders[0..n]:    FolderFolder
    Notes[0..n]:        FolderNote
    Tasks[0..n]:        FolderTask
    Order:              integer
    GroupId:            integer
    UserId:             integer             
end class


class FolderFolder
    Title(128):         string  
    Kind:               integer
    Order:              integer
    Pos(8):             string   
    Group:              Group       <backNav: FolderFolder>
    Folder(0..1):       Folder      <backNav: InFolders[0..n]>
    InFolder(0..1):     Folder      <backNav: Folders[0..n]>
    GroupId:            integer     
    InFolderId:         integer
    FolderId:           integer
end class

class FolderNote
    Title(128):     string
    Order:          integer
    Pos(8):         string   
    Folder(0..1):   Folder  <backNav: Notes[0..n]>
    Note(0..1):     Note    <backNav: InFolders[0..n]>
end class


class FolderTask
    Title(128):     string
    Order:          integer
    Pos(8):         string   
    Folder(0..1):   Folder <backNav: Tasks[0..n]>
    Task(0..1):     Task   <backNav: InFolders[0..n]>
end class      
  


-- ==============================================================================


constraint Folder::Folders
    element.InFolderId = self.Id 


context Folder::IsPublic: boolean
post:
     result = (self.Status = FS_PUBLIC_FOLDER)


context Folder::IsShared: boolean
post:
     result = (self.Status = FS_SHARED_FOLDER)        


context Folder::href: string
post:
    result = "/folder/" + self.Id    

context Folder::IsPinned: boolean
post:
    result = user.PinnedFolders.Folders.exists(element.Folder.Id = self.Id)


context Folder::IsBasket: boolean
post:
    if user.BasketFolder.Id = self.Id then
        result = true
    else
        result = false
    end if


context Folder::CreateSubFolderEx(properties: JsonObject) : FolderFolder
post:
    let f: Folder = new Folder in

    f.Title = properties.Title
    f.Summary = properties.Summary

    self.Folders.newElement( e | e.Folder = f and e.Order = properties.Order)

-- ==============================================================================


context FolderFolder
inv:
    self.Title = self.Folder.Title

constraint FolderFolder::Folder
    self.FolderId = element.Id    


context FolderFolder::href: string
post:
    result = self.Folder.href
    

context FolderFolder::Summary: string
post:
    result = self.Folder.Summary

context FolderFolder::IsPinned: boolean
post:
    result = self.Folder.IsPinned

-- ==============================================================================


context FolderNote
inv:
    self.Title = self.Note.Title


context FolderNote::href: string
post:
    result = self.Note.href


context FolderNote::Summary: string
post:
    result = self.Note.Summary


-- ==============================================================================


context FolderTask
inv:
    self.Title = self.Task.Title
    

context FolderTask::href: string
post:
    result = self.Task.href


context FolderTask::Summary: string
post:
    result = self.Task.Summary 

context FolderTask::State: string
post:
    result = self.Task.State 

    

            

    
        