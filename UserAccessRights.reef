const ACC_DENIED = 0
const ACC_READ   = 1
const ACC_WRITE  = 2
const ACC_READWRITE   = 3
--> sys/login?u=alice;g=13;r=Guest

---- Unique access. User is null, Group is Guest Group
access role Guest
    acc App = ACC_READ

    acc Group =
        if self = group then
            ACC_READ
        end if

    acc TaskList =
        if self.Group = group then
            ACC_READ
        end if

    acc Task =
        if self.TaskList.Group = group then
            ACC_READ
        end if

    acc Note =
        if self.State = NS_PUBLISHED_NOTE then
            ACC_READ
        else
            self.AccGuest
        end if

    acc Folder = self.AccGuest

    acc MessageChannel = self.AccGuest

context MessageChannel::AccGuest: integer
post:
        if self.Group = group then
            result = ACC_READ
        end if


context Folder::AccGuest: integer
post:
    if self.Group = group then
        result = ACC_READ
    end if

context Note::AccGuest: integer
post:
    result = self.InFolders.iterate(f; ac: integer | ac = ac | f.Folder.AccGuest)




----------- GroupOwner ------------------------------------------------

access role GroupOwner: Group Leader
    acc App = ACC_READ

    acc Group = self.AccOwner

    acc TaskList = self.AccOwner

    acc Task = self.AccOwner

    acc User =
        if self = user then
            ACC_READWRITE
        else if self.Groups.exists(element.GroupId = group.Id) then
            ACC_READ
        else
            ACC_DENIED
        end if
        end if

    acc Folder = self.AccOwner
        if self.GroupId = group.Id then
            ACC_READWRITE
        else
            self.CalculateAccessLevel
        end if

    acc FolderFolder =
        if self.GroupId = group.Id then
            ACC_READWRITE
        else
            ACC_READ
        end if



context Group::AccOwner: integer
post:
    if group = self then
        result = ACC_READWRITE
    else if self.IsPublic then
        result = ACC_READWRITE
    else if self.Name = "Guests" then
        result = ACC_READWRITE
    end if
    end if
    end if

context TaskList::AccOwner: integer
post:
    if self.User = user then
        result = ACC_READWRITE
    else if self.Group then
        result = self.Group.AccOwner
    end if
    end if

context Task::AccOwner: integer
post:
    if self.Actor = user or self.TaskList.User = user or self.TaskList.Group = group then
            result = ACC_READWRITE
    else if self.InPersonalFolder(user) then
            result = ACC_READWRITE
    else if self.InGroupFolder(group) then
            result = ACC_READ
    end if
    end if
    end if

context Task::InPersonalFolder(user: User): boolean
post:
    result = self.InFolders.exists(element.Folder.User = user)

context Task::InGroupFolder(group: Group): boolean
post:
    result = self.InFolders.exists(element.Folder.Group = group)

context Folder::AccOwner: integer
post:
    if self.GroupId = group.Id then
            result = ACC_READWRITE
    else if self.IsPublic then
        result = ACC_READWRITE
    else if self.IsShared then
            if self.InFolders.exists(element.GroupId = group.Id) then
                result = ACC_READ
            end if
        end if
    end if
    end if





context User::IsInGroup(g: Group): boolean
post:
    result = self.Groups.exists(element.GroupId = g.Id)
