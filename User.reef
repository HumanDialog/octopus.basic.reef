const MIN_USER_TASK_ORDER   = &h80000000
const LAST_USER_TASK_ORDER  = &h7FFFFFFF
--const LAST_USER_TASK_ORDER_STEP = 16    --2^4

class User
    login:                  string
	groupid:                integer
    Name:                   string
    Email:                  string
    MyTasks(0..n):          Task                <backNav: Actor(0..1)>
    Groups(0..n):           UserGroup           <backNav: User>
    Folders(0..n):          Folder              <backNav: User>
    AllFolders(0..n):       Folder              <backNav: Owner>
    MessageChannels[0..n]:  MessageChannelUser  <backNav: User>
    CreatedNotes(0..n):     Note                <backNav: CreatedBy>
    ModifiedNotes(0..n):    Note                <backNav: ModifiedBy>
    MyMessages(0..n):       Message
end class



constraint User::MyTasks
    element.ActorId = self.Id and element.Status = STATUS_ACTIVE
    
constraint User::Folders
    element.UserId = self.Id and element.Status = FS_USER_ROOT_FOLDER   
    
constraint User::AllFolders
    element.UserId = self.Id      
    
constraint User::MessageChannels
    element.UserId = self.Id    
    
context User::GetBasketFolder: Folder
post:
    let f: Folder = self.Folders.select(element.Kind = FK_BASKET).first in 
    if f.isNull then
        f = self.Folders.newElement(e | e.Title = user.Name + " Basket" and e.Kind = FK_BASKET)
    end if
    
    result = f         


context User::FinishTasks()
post:
    self.MyTasks.select(element.State <> STATE_FINISHED).forAll(element.Finish())

