const MIN_USER_TASK_ORDER   = &h80000000
const LAST_USER_TASK_ORDER  = &h7FFFFFFF
--const LAST_USER_TASK_ORDER_STEP = 16    --2^4

class User
    login:                  string
	groupid:                integer
    Name:                   string
    Email:                  string
    MyTasks(0..n):          Task                <backNav: Actor(0..1)>
    MyLists(0..n):          TaskList            <backNav: User>
    Groups(0..n):           UserGroup           <backNav: User>
    Folders(0..n):          Folder              <backNav: User>
    AllFolders(0..n):       Folder              <backNav: Owner>
    PinnedFolders:          Folder
    BasketFolder:           Folder              
    MessageChannels[0..n]:  MessageChannelUser  <backNav: User>
    CreatedNotes(0..n):     Note                <backNav: CreatedBy>
    ModifiedNotes(0..n):    Note                <backNav: ModifiedBy>
    MyMessages(0..n):       Message
end class

constraint User::PinnedFolders
    element.UserId = self.Id and element.Status = FS_PINNED_ROOT_FOLDER

constraint User::BasketFolder
    element.UserId = self.Id and element.Status = FS_BASKET_ROOT_FOLDER

constraint User::MyTasks
    element.ActorId = self.Id and element.Status = STATUS_ACTIVE
    
constraint User::Folders
    element.UserId = self.Id and element.Status = FS_USER_ROOT_FOLDER   
    
constraint User::AllFolders
    element.UserId = self.Id      
    
constraint User::MessageChannels
    element.UserId = self.Id    
    
context User::GetBasketFolder: Folder
post:
   
    if self.BasketFolder.isNull then
        self.BasketFolder = self.AllFolders.newElement(e | e.Title = user.Name + " Basket" and e.Status = FS_BASKET_ROOT_FOLDER)
    end if
    
    result = self.BasketFolder 

context User::GetPinnedFolders: Folder
post:
   
    if self.PinnedFolders.isNull then
        self.PinnedFolders = self.AllFolders.newElement(e | e.Title = user.Name + " Pinned Folders" and e.Status = FS_PINNED_ROOT_FOLDER)
    end if
    
    result = self.PinnedFolders       


context User::FinishTasks()
post:
    self.MyTasks.select(element.State <> STATE_FINISHED).forAll(element.Finish())


--context User::MoveFolderToBasket(folder: Folder): FolderFolder
--pre:
--    self.Folders.exists(element.Id = folder.Id)
--post:
--    folder.User = null      -- removing from Folders collection
--    result = folder.CopyToBasket()
    


context User::FindMessageChannelWith(toWhom: User): MessageChannelUser
post:
    result = self.MessageChannels.select( e | e.MessageChannel.Users.count = 2 and e.MessageChannel.Users.exists(element.UserId = self.Id) and e.MessageChannel.Users.exists(element.UserId = toWhom.Id)).first


context User::AddDirectMesssageChannel(toWhom: User): MessageChannel
pre:
    toWhom <> null
post:
    let myChannel: MessageChannelUser = self.FindMessageChannelWith(toWhom)
    let itsChannel: MessageChannelUser = toWhom.FindMessageChannelWith(self)

    let order: integer

    if myChannel = null then
        order = self.MessageChannels.max(element.Order)
        myChannel = self.MessageChannels.newElement(element.Order = order + ORDER_STEP)
    end if

    if itsChannel = null then
        order = toWhom.MessageChannels.max(element.Order)
        itsChannel = toWhom.MessageChannels.newElement(element.Order = order + ORDER_STEP)
    end if

    if myChannel.MessageChannel = null then
        if itsChannel.MessageChannel = null then
            myChannel.MessageChannel = new MessageChannel
            itsChannel.MessageChannel = myChannel.MessageChannel
            myChannel.MessageChannel.Title = self.Name + " and " + toWhom.Name
        else
            myChannel.MessageChannel = itsChannel.MessageChannel
        end if
    else
        if itsChannel.MessageChannel = null then
            itsChannel.MessageChannel = myChannel.MessageChannel
        end if
    end if

    result = myChannel.MessageChannel
